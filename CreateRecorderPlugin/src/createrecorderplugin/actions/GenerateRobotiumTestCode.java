package createrecorderplugin.popup.actions;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringBufferInputStream;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.preferences.ConfigurationScope;
import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.eclipse.core.runtime.preferences.IPreferencesService;
import org.eclipse.core.runtime.preferences.InstanceScope;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.preferences.ScopedPreferenceStore;

import com.androidApp.emitter.EmitRobotiumCode;
import com.androidApp.emitter.EmitRobotiumCode.LineAndTokens;
import com.androidApp.parser.ManifestParser;
import com.androidApp.parser.ProjectParser;
import com.androidApp.parser.ProjectPropertiesScan;
import com.androidApp.util.Constants;
import com.androidApp.util.FileUtility;

import createrecorder.util.EclipseUtility;
import createrecorder.util.RecorderConstants;

public class GenerateRobotiumTestCode implements IObjectActionDelegate {
	protected final String TEST_SUFFIX = "Test";

	private Shell mShell;
	private StructuredSelection mSelection;
	private String mAndroidSDK;

	/**
	 * Constructor for Action1.
	 */
	public GenerateRobotiumTestCode() {
		super();
		IPreferencesService service = Platform.getPreferencesService();
		mAndroidSDK = service.getString(RecorderConstants.ECLIPSE_ADT, RecorderConstants.ANDROID_SDK, null, null);
	}

	/**
	 * @see IObjectActionDelegate#setActivePart(IAction, IWorkbenchPart)
	 */
	public void setActivePart(IAction action, IWorkbenchPart targetPart) {
		mShell = targetPart.getSite().getShell();
	}
	/**
	 * @see IActionDelegate#run(IAction)
	 * create the robotium recorder project
	 */
	public void run(IAction action) {
		String eventsFileName = "device";
		String outputCodeFileName = Constants.Filenames.OUTPUT;
	
		if (mSelection != null) {
			try {
				IProject project = (IProject) mSelection.getFirstElement();
				IWorkspace workspace = project.getWorkspace();
				IWorkspaceRoot workspaceRoot = workspace.getRoot();
				IPath projectPath = project.getLocation();
				File projectDir = projectPath.toFile();
				File manifestFile = new File(projectDir, Constants.Filenames.ANDROID_MANIFEST_XML);
				File projectFile = new File(projectDir,  Constants.Filenames.PROJECT_FILENAME);
				File projectPropertiesFile = new File(projectDir,  Constants.Filenames.PROJECT_PROPERTIES_FILENAME);
				ManifestParser manifestParser = null;
				ProjectParser projectParser = null;
				ProjectPropertiesScan projectPropertiesScan = null;
				try {
					manifestParser = new ManifestParser(manifestFile);
					projectParser = new ProjectParser(projectFile);
					projectPropertiesScan = new ProjectPropertiesScan(projectPropertiesFile);
				} catch (Exception ex) {
					ex.printStackTrace();
				}

				// create the new project
				String newProjectName = project.getName() + TEST_SUFFIX;
				IProject testProject = EclipseUtility.createBaseProject(newProjectName);
				EmitRobotiumCode emitter = new EmitRobotiumCode();
				eventsFileName = getEventsFile(mAndroidSDK, Constants.Filenames.EVENTS);
				List<LineAndTokens> lines = EmitRobotiumCode.generateTestCode(emitter, eventsFileName);
				
				// test class path and test class name generated by emitter.
				String testClassPath = emitter.getApplicationClassPath() + Constants.Extensions.TEST;
				String testClassName = emitter.getApplicationClassName() + Constants.Extensions.TEST;
				String templateFileName = testClassName + "." + Constants.Extensions.JAVA;
				String packagePath = manifestParser.getPackage() +  Constants.Extensions.TEST;
				
				// scan to see if there are any unit tests in the source folder, and if not, the robotium jar file
				// hasn't been selected, so we have to prompt the user.
				IFolder srcFolder = testProject.getFolder(Constants.Dirs.SRC);
				int uniqueFileIndex = 0;
				if (srcFolder.exists()) {
					IFolder projectFolder = srcFolder.getFolder(FileUtility.sourceDirectoryFromClassName(packagePath));
					uniqueFileIndex = EclipseUtility.uniqueFileIndex(projectFolder, templateFileName);
				}
				String robotiumJar = "";
				String robotiumJarPath = "";
				if (uniqueFileIndex != 0) {
					testClassPath += Integer.toString(uniqueFileIndex);
					testClassName += Integer.toString(uniqueFileIndex) ;
				} else {

					// prompt the user for the robotium jar file location
					FileDialog fileDialog = robotiumJarFileDialog();
					String robotiumDir = fileDialog.getFilterPath();
					robotiumJar = fileDialog.getFileName();
					if (robotiumJar.equals("")) {
						return;
					}
					robotiumJarPath = robotiumDir + File.separator + robotiumJar;
					// create the java project and write the test driver out into it
					IJavaProject javaProject = EclipseUtility.createJavaNature(testProject);
					createFolders(testProject);
					createProjectProperties(testProject, projectParser, projectPropertiesScan);
					createProject(testProject, projectParser);

					// FIRST TIME ONLY:create the buil.xml AndroidManifest.xml, and resource files.
					writeBuildXML(testProject, emitter.getApplicationClassPath());
					writeManifest(testProject, testClassName, testClassPath, emitter.getApplicationPackage());
					writeResources(testProject);				
					writeClasspath(testProject,  projectParser.getProjectName(), robotiumJar);
					copyRobotiumJarToLibs(testProject, robotiumJarPath, robotiumJar);
					copyUtilityJarToLibs(testProject);

					// create the package for the test code, then write the AllTests.java driver which executes all of the unit tests
					IPackageFragment pack = javaProject.getPackageFragmentRoot(srcFolder).createPackageFragment(packagePath, false, null);
					pack.open(null);
					copyTestDriverFile(pack, packagePath, emitter.getApplicationClassPath());
					pack.close();
				}
				// write out the test code, first to a temporary file, then to the actual project file.
				writeTestCode(emitter, lines, packagePath, testClassName, outputCodeFileName);
				IJavaProject javaProject = JavaCore.create(testProject);
				IPackageFragmentRoot packRoot = javaProject.getPackageFragmentRoot(srcFolder);
				packRoot.open(null);
				IPackageFragment pack = packRoot.getPackageFragment(packagePath);
				String testCode = FileUtility.readToString(new FileInputStream(outputCodeFileName));
				String projectFileOutput = testClassName + "." + Constants.Extensions.JAVA;
				ICompilationUnit classFile = pack.createCompilationUnit(projectFileOutput, testCode, true, null);	
				packRoot.close();
			} catch (Exception ex) {
				MessageDialog.openInformation(
						mShell,
						"GenerateRobotiumTestCode",
						"There was an exception creating the test project " + ex.getMessage());
				ex.printStackTrace();
			}
		}
	}
	
	/** 
	 * file dialog to prompt for the location of the robotium jar file
	 * @return
	 */
	public  FileDialog robotiumJarFileDialog() {
		String[] filerExtensions = new String[1];
		filerExtensions[0] = "jar";
		FileDialog fileDialog = new FileDialog(mShell);
		fileDialog.setText("locate robotium jar file");
		fileDialog.setFilterExtensions(filerExtensions);
		fileDialog.open();
		return fileDialog;
	}

	/**
	 * @see IActionDelegate#selectionChanged(IAction, ISelection)
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		mSelection = (StructuredSelection) selection;
	}
	
	
	/**
	 * create the directories required by the test project
	 * src - source directory
	 * res - resources directory
	 * res/drawable - directory for icons and stuff
	 * res/values - directory for strings and stuff
	 * libs - directory for libraries (specifically the robotium jar)
	 * gen - for generated android files
	 * @param testProject reference to project to create directories under
	 */
	public static void createFolders(IProject testProject) throws IOException {
		IFolder libFolder = EclipseUtility.createFolder(testProject, Constants.Dirs.LIBS);
		IFolder srcFolder = EclipseUtility.createFolder(testProject, Constants.Dirs.SRC);
		IFolder resFolder = EclipseUtility.createFolder(testProject, Constants.Dirs.RES);
		IFolder drawableFolder = EclipseUtility.createFolder(resFolder, Constants.Dirs.DRAWABLE);
		IFolder genFolder = EclipseUtility.createFolder(testProject, Constants.Dirs.GEN);
	}
	
	public static void writeBuildXML(IProject project, String targetClassPath) throws CoreException, IOException {
		String buildXML = EmitRobotiumCode.createBuildXML(targetClassPath);
		EclipseUtility.writeString(project, Constants.Filenames.BUILD_XML, buildXML);
	}
	
	public static void writeManifest(IProject project, String testClassName, String testClassPath, String targetPackage) throws CoreException, IOException {
		String manifest = EmitRobotiumCode.createManifest(testClassName, testClassPath, targetPackage); 
		EclipseUtility.writeString(project, Constants.Filenames.ANDROID_MANIFEST_XML, manifest);
	}	
	
	/**
	 * create the project.properties file
	 * @param testProject reference to the project
	 * @param projectParser parsed information from .properties
	 * @param propertiesScan scanned information from project.properties
	 * @throws CoreException
	 * @throws IOException
	 */
	public void createProjectProperties(IProject testProject, ProjectParser projectParser, ProjectPropertiesScan propertiesScan) throws CoreException, IOException {
		String projectProperties = FileUtility.readTemplate(RecorderConstants.PROJECT_PROPERTIES_TEMPLATE);
		projectProperties = projectProperties.replace(Constants.VariableNames.TARGET, propertiesScan.getTarget());
		projectProperties = projectProperties.replace(Constants.VariableNames.CLASSNAME, projectParser.getProjectName());
		EclipseUtility.writeString(testProject, Constants.Filenames.PROJECT_PROPERTIES_FILENAME, projectProperties);
	}

	
	/**
	 * popupate the .project file.
	 * @param testProject  android project under test.
	 * @param projectParser parser for the .project file under test.
	 * @throws CoreException
	 * @throws IOException
	 */
	public void createProject(IProject testProject, ProjectParser projectParser) throws CoreException, IOException {
		String project = FileUtility.readTemplate(GenerateRobotiumTestCode.class, RecorderConstants.PROJECT_TEMPLATE);
		project = project.replace(Constants.VariableNames.CLASSNAME, projectParser.getProjectName());
		project = project.replace(Constants.VariableNames.MODE, Constants.Names.TEST);
		IFile file = testProject.getFile(Constants.Filenames.PROJECT_FILENAME);
		file.delete(false, null);
		InputStream is = new StringBufferInputStream(project);
		file.create(is, IFile.FORCE, null);
	}
	
	/**
	 * copy the project.properties file to the targets
	 * @param project
	 * @throws IOException
	 * @throws CoreException
	 */
	public static void copyBuildFiles(IProject project, String target) throws IOException, CoreException {
		String projectProperties = EmitRobotiumCode.createProjectProperties(target);
		EclipseUtility.writeString(project, Constants.Filenames.PROJECT_PROPERTIES, projectProperties);
	}
	
	/**
	 * generate the .classpath file for building the project.  We  add the target project name
	 * for eclipse/ant, and the robotium jar in the libs directory.
	 * @param projectName name of the target project
	 * @param name of the robotium-solo-X.XX.jar
	 * @throws IOException if the file can't be written
	 */
	protected static void writeClasspath(IProject project, String projectName, String robotiumJar) throws IOException, CoreException {
		String classpath = EmitRobotiumCode.createClasspath(projectName, robotiumJar);
		EclipseUtility.writeString(project, Constants.Filenames.CLASSPATH, classpath);
	}

	/**
	 * write out the AllTests.java to the output class directory src\foo\bar\path
	 * @param packagePath com.foo.bar.test
	 * @param applicationClassPath fully.qualified.path.to.application.under.test
	 * @throws IOException if the template can't be found
	 */
	public static void copyTestDriverFile(IPackageFragment pack, String packagePath, String applicationClassPath) throws IOException, JavaModelException {
		String allTests = FileUtility.readTemplate(Constants.Templates.ALL_TESTS);
		allTests = allTests.replace(Constants.VariableNames.CLASSPACKAGE, packagePath);
		ICompilationUnit classFile = pack.createCompilationUnit(RecorderConstants.ALLTESTS_FILE, allTests, true, null);			
	}

	/**
	 * copy the launcher.png file into the res/drawable directorys
	 * @param project
	 * @throws IOException
	 * @throws CoreException
	 */
	public static void writeResources(IProject project) throws IOException, CoreException {
		IFolder resFolder = project.getFolder(Constants.Dirs.RES);
		IFolder drawableFolder = resFolder.getFolder(Constants.Dirs.DRAWABLE);
		EclipseUtility.writeResource(drawableFolder, Constants.Filenames.LAUNCHER_PNG);
	}
	
	/**
	 * copy the robotium jar file to the output library directory
	 * @param project target project
	 * @param robotiumJar robotium-solo-version.jar
	 * @throws FileNotFoundException
	 * @throws CoreException
	 */
	public static void copyRobotiumJarToLibs(IProject project, String robotiumJarPath, String robotiumJar) throws FileNotFoundException, CoreException {
		FileInputStream fis = new FileInputStream(new File(robotiumJarPath));
		IFolder libsFolder = project.getFolder(Constants.Dirs.LIBS);
		IFile file = libsFolder.getFile(robotiumJar);
		file.delete(false, null);
		file.create(fis, IFile.FORCE, null);
	}
	/**
	 * copy support library to the output directory
	 * @param libraryDir libs directory
	 * @throws IOException if the template can't be found
	 */
	public static void copyUtilityJarToLibs(IProject project) throws IOException, CoreException {
		InputStream fis = EmitRobotiumCode.class.getResourceAsStream("/" + Constants.Filenames.UTILITY_JAR);
		IFolder libsFolder = project.getFolder(Constants.Dirs.LIBS);
		IFile file = libsFolder.getFile(Constants.Filenames.UTILITY_JAR);
		file.delete(false, null);
		file.create(fis, IFile.FORCE, null);
	}

	
	/**
	 * extract the events file from the device via adb if the keyword "device" is specified, otherwise return the
	 * file that was passed ins
	 * @param eventsFilename
	 * @return
	 */
	public String getEventsFile(String androidSdkPath, String eventsFilename) {
		// if he specified device, use adb to pull the events file off the device.
		if (eventsFilename.equals(Constants.Names.DEVICE)) {
	       Process proc = null;
	       String cmd = RecorderConstants.ADB + " pull " + RecorderConstants.DEVICE_EVENTS;
	       try {
	    	   	String adbPath = mAndroidSDK + File.separator + Constants.Dirs.PLATFORM_TOOLS + File.separator + Constants.Executables.ADB;
	    	   	cmd = adbPath + " pull /sdcard/events.txt";
	            proc = Runtime.getRuntime().exec(cmd);
	        } catch (IOException e) {
	            System.err.println("failed to execute " + cmd + " " + e.getMessage());
	            System.exit(-1);
	        }
	        try {
	            int result = proc.waitFor();
	        } catch (InterruptedException e) {
	            System.err.println("interrupted executing " + cmd + " " + e.getMessage());
	            System.exit(-1);
	        }	        
		}
		return Constants.Filenames.EVENTS;
	}
	
	public void writeTestCode(EmitRobotiumCode emitter, List<LineAndTokens> lines, String packagePath, String testClassName, String outputCodeFileName) throws IOException {
		// write the header template, the emitter output, and the trailer temoplate.
		BufferedWriter bw = new BufferedWriter(new FileWriter(outputCodeFileName));
		EmitRobotiumCode.writeHeader(emitter.getApplicationClassPath(), packagePath, testClassName, emitter.getApplicationClassName(), bw);
		String testFunction = FileUtility.readTemplate(Constants.Templates.TEST_FUNCTION);
		bw.write(testFunction);
		EmitRobotiumCode.writeLines(bw, lines);
		EmitRobotiumCode.writeTrailer(bw);
		bw.close();

	}			
}

