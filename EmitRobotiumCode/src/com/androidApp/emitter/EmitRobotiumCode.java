package com.androidApp.emitter;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.androidApp.parser.ProjectPropertiesScan;
import com.androidApp.util.Constants;
import com.androidApp.util.FileUtility;
import com.androidApp.util.StringUtils;
import com.androidApp.util.SuperTokenizer;
import com.androidApp.util.Constants.Dirs;

/** 
 * class to emit robotium code from the events.txt file generated by the recorder.
 * @author Matthew
 * Copyright (c) 2013 Matthew Reynolds.  All Rights Reserved.
 * TODO: All Events MUST respect mLastEventWasWaitForActivity, not just click
 * TODO: add mLastEventWasCreateDialog for the same thing
 */
public class EmitRobotiumCode {
	/**
	 * take an input file spit out by the event recorder, and generate robotium code
	 * @param args 4 strings: input file (events.txt), output file test.java, target project name and the robotiumJar file.
	 * the caller has to specify the project name because the .apk file name can be changed, and it actually the name of the 
	 * build project, i.e. made from unobtainium
	 * @throws FileNotFoundException
	 * @throws IOException
	 * @throws EmitterException
	 */
	public static void main(String[] args) throws FileNotFoundException, IOException, EmitterException {
		if (args.length < 2) {
			System.err.println("usage: EmitRobotium [events.txt|device] <target-project-name> [binary]");
			System.err.println("events.txt is the output file from the recorder");
			System.err.println("device pulls the events.txt file from /sdcard/events.txt");
			System.err.println("<target-project-name> is the name of the project to instrument via robotium");
			System.err.println("if \"device\" is specified, then it is the class path of the activity to instrument");
			System.err.println("if <target-project-name> directory exists, then the output code will be written into");
			System.err.println("a new file with a numeric suffix, e.g. ApiDemosTest1.java");
			System.err.println("<robotium-jar-path> path to the robotium jar file (download it from http://code.google.com/p/robotium/downloads/list)");
			System.err.println("--splitFunctions splits the output into functions bracketed by activities");
			System.err.println("--minLines <min-lines> minimum # of lines of code in a function (default: 5) ");
			System.exit(-1);
		}
		String eventsFileName = args[0];
		String targetProject = args[1];
		boolean fBinary = false;
		if (args.length == 3) {
			fBinary = args[2].equals("binary");
		}
		String outputCodeFileName = Constants.Filenames.OUTPUT;
		IEmitCode emitter = null;
		if (fBinary) {
			emitter = new EmitRobotiumCodeBinary();
		} else {
			emitter = new EmitRobotiumCodeSource();
		}
		SetupRobotiumProject setup = new SetupRobotiumProject();
		SetupRobotiumProject.Options options = setup.processOptions(args);
		
		// scan the project properties file
		File projectPropertiesFile = new File(targetProject,  Constants.Filenames.PROJECT_PROPERTIES_FILENAME);
		ProjectPropertiesScan projectPropertiesScan = null;
		try {
				projectPropertiesScan = new ProjectPropertiesScan(projectPropertiesFile);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		// grab the events file
		eventsFileName = SetupRobotiumProject.getEventsFile(eventsFileName);

		// generate the test code.
		List<MotionEventList> motionEvents = new ArrayList<MotionEventList>();
		List<EmitRobotiumCodeSource.LineAndTokens> lines = emitter.generateTestCode(emitter, eventsFileName, motionEvents);

		if (emitter.getApplicationClassPath() == null) {
			System.err.println("unable to generate output code, no activity reference");
			System.exit(-1);
		}
		String testClassPath = emitter.getApplicationClassPath() + Constants.Extensions.TEST;
		
		// generated test class name
		String testClassName = emitter.getApplicationClassName() + Constants.Extensions.TEST;
		String srcDirName = testClassName + File.separator + Constants.Dirs.SRC;
		String packageFilePath = srcDirName + File.separator + FileUtility.sourceDirectoryFromClassName(testClassPath);
		String templateFileName = testClassName + "." + Constants.Extensions.JAVA;
		int uniqueFileIndex = FileUtility.uniqueFileIndex(packageFilePath, templateFileName);
		if (uniqueFileIndex != 0) {
			testClassName += Integer.toString(uniqueFileIndex) ;
		}
		// asset directory to write motion event files to
		String assetDirName = testClassName + File.separator + Constants.Dirs.SRC;

		// write the header template, the emitter output, and the trailer temoplate.
		BufferedWriter bw = new BufferedWriter(new FileWriter(outputCodeFileName));
		emitter.writeHeader(emitter.getApplicationClassPath(), testClassPath, testClassName, emitter.getApplicationClassName(), bw);
		if (options.mfWriteFunctions) {
			SplitFunction splitter = new SplitFunction(options.mMinLines);
			splitter.writeFunctions(bw, "test" + targetProject, 0, lines);
			emitter.writeClassTrailer(bw);
		} else {
			emitter.writeFunctionHeader(bw);
			emitter.writeLines(bw, lines);
			emitter.writeTrailer(bw);
		}
		
		bw.close();
		if (emitter.getApplicationClassPath() != null) {
			
			// if no previous file was found, we're creating a project for the first time, and so we have to
			// make the directories, copy the build files, etc.  TODO:A much better test would be to check for the
			// project directory and use a flag.
			if (uniqueFileIndex == 0) {
				SetupRobotiumProject.Dirs dirs = setup.createDirectories(testClassName, packageFilePath);
				SetupRobotiumProject.writeBuildXML(testClassName, emitter.getApplicationClassPath());
				SetupRobotiumProject.copyBuildFiles(testClassName, projectPropertiesScan.getTarget());
				SetupRobotiumProject.copyLibraries(dirs.mLibDir);
				SetupRobotiumProject.writeManifest(testClassName, testClassName, testClassPath, emitter.getApplicationPackage());
				SetupRobotiumProject.copyTestDriverFile(packageFilePath, emitter.getApplicationClassPath() + Constants.Extensions.TEST);
				SetupRobotiumProject.writeResources(dirs, testClassName);
				if (fBinary) {
					SetupRobotiumProject.writeClasspathBinary(testClassName, Constants.Filenames.ROBOTIUM_JAR);
				} else {
					SetupRobotiumProject.writeClasspath(testClassName, targetProject, Constants.Filenames.ROBOTIUM_JAR);
				}
			}
			SetupRobotiumProject.writeMotionEvents(assetDirName, testClassName, motionEvents);
			SetupRobotiumProject.moveOutputCodeToPackage(packageFilePath, outputCodeFileName, testClassName);
		} else {
			System.err.println("no activity class specified");
		}
	}
	
	public EmitRobotiumCode() {
	}
}
